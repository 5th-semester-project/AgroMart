name: Continuous Integration and Continuous Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  Unit-Testing-Main:
    runs-on: ubuntu-latest
    outputs:
      test-passed: ${{ steps.test-step.outputs.test-passed }}

    steps:
      - name: Checkout Main Branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node environment
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm install

      - name: Run tests
        id: test-step
        run: |
          npm run test
          if [ $? -eq 0 ]; then
            echo "test-passed=success" >> "$GITHUB_OUTPUT"
            echo "All unit testing Passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "test-passed=failure" >> "$GITHUB_OUTPUT"
            echo "Unit testing failed!" >> $GITHUB_STEP_SUMMARY
          fi

  trivy-scan-for-vulnerabilities:
    runs-on: ubuntu-latest
    outputs:
      trivy-result: ${{ steps.trivy-result-step.outputs.result }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Trivy scanner
        id: trivy-result-step
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: fs
          hide-progress: true
          output: trivy.txt

      - name: Publish Trivy Output to Summary
        run: |
          echo "### Security Output" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```terraform' >> $GITHUB_STEP_SUMMARY
          cat trivy.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY

  Sonarqube-Code-analysis:
    runs-on: ubuntu-latest
    outputs:
      quality-gate-status: ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}
    steps:
      - name: Checkout Main Branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v3.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: "Show SonarQube Quality Gate Status"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" >> $GITHUB_STEP_SUMMARY

  docker-image-build-and-push:
    needs: [Unit-Testing-Main, trivy-scan-for-vulnerabilities]
    # , Sonarqube-Code-analysis
    if: needs.Unit-Testing-Main.outputs.test-passed == 'success' 
    # && needs.Sonarqube-Code-analysis.outputs.quality-gate-status == 'PASSED'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: neranjanhub/agromart:latest ,neranjanhub/agromart:${{github.run_number}}

  deploy-to-ec2:

      needs: docker-image-build-and-push
      runs-on: self-hosted

      steps:
      - name: Pull Docker image
        run: docker pull neranjanhub/agromart:latest

      - name: Delete Old docker container
        run: (docker rm -f agromart 2>/dev/null) || true


      - name: Run Docker Container
        run: docker run --env-file /home/ubuntu/.env -p 3000:3000 neranjanhub/agromart:latest


